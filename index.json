[
{
	"uri": "https://ikhsanalatsary.github.io/myslide/intro-to/me/",
	"title": "Me",
	"tags": [],
	"description": "",
	"content": " Introduction and The Goal of This Section Pengenalan \u0026amp; Tujuan  Mengenal Apa itu JavaScript Memahami karakteristik dan konsep memahami sintaks  Breakfast  Eat eggs Drink coffee  In the evening Dinner  Eat spaghetti Drink wine  Going to sleep  Get in bed Count sheep  "
},
{
	"uri": "https://ikhsanalatsary.github.io/myslide/intro-to/javascript/",
	"title": "JavaScript",
	"tags": [],
	"description": "",
	"content": " Introduction and The Goal of This Section Pengenalan \u0026amp; Tujuan  Mengenal JavaScript Memahami karakteristik dan konsep Memahami sintaks  Setup  Text Editor menggunakan Brackets Browser menggunakan Chrome Developer tools Chrome  Apa itu JavaScript JavaScript JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them. (MDN-Mozilla)\nPenjelasan JavaScript adalah cross-platform, bahasa scripting berorientasi objek. Ini adalah bahasa yang kecil dan ringan. Di dalam environment host (misalnya, browser web), JavaScript dapat dihubungkan ke objek dari environment tersebut untuk memberikan kontrol program terhadapnya.\nJavaScript Dan Java JavaScript Bukan Java. namun sintaks javascipt mirip java dalam beberapa case tertentu.\nConceptual Aside  Syntax Parsers Execution Contexts Lexical Environments  Syntax Parsers: A PROGRAM THAT READS YOUR CODE AND DETERMINES WHAT IT DOES AND IF ITS GRAMMAR IS VALID Your code isn't magic. Someone else wrote a program to translate it for the computer.\nSEBUAH PROGRAM YANG MEMBACA KODE KITA DAN TAHU BAHWA KODE KITA BENAR ATAU SALAH Kode kita bukanlah sihir/sulap. Orang lain yang membuat program tersebut diterjemahkan untuk berkomunikasi ke komputer.\nLexical Environment: WHERE SOMETHING SITS PHYSICALLY IN THE CODE YOU WRITE 'Lexical' means 'having to do with words or grammar'. A lexical environment exists in programming languages in which where you write something is important.\nExecution Contexts: A WRAPPER TO HELP MANAGE THE CODE THAT IS RUNNING There are a lots of lexical environments. Which one is currently running is managed via execution contexts. it can contain things beyond what you've written in your code.\nIt\u0026rsquo;s Important! Conceptual Aside: Name / Value Pairs And Objects Name / Value Pair: A NAME WHICH MAPS TO A UNIQUE VALUE The name may be defined more than once, but only can have one value in any given context.\nThat value may be more name/value pairs.\nFor Example Alamat = 'Jl. Margonda no. 7'\nObject: A COLLECTION OF NAME VALUE PAIRS The simplest definition when talking about JavaScript.\nIlustration Example Object { Alamat: { Jalan: 'Margonda', Nomor: 7, Apartemen: { Lantai: 3, Nomor: 007 } } }  The Global Environment And The Global Object Execution Context (Global)  Global Object this  Let\u0026rsquo;s start code! So\u0026hellip; Global Object adalah Window Global Object(window) sama dengan this\nGlobal  Not inside a function  Creation and Hoisting Conceptual Aside: JavaScript and undefined The Execution Context - Code Execution Conceptual Aside Single Threaded Syncronous Execution Single Threaded: One Command at a time Under the hood of the browser, maybe not Syncronous: One at a time Function Invocation And The Execution Context Invocation: Running A Function In JavaScript, by using parenthesis `()` Execution Stack Execution Stack Execution Stack Function, Context, and Variable Environment Variable Environment: Where the variable live And how they relate to each other in memory Scope Chain Conceptul Aside Types And JavaScript Dynamic Typing: You don\u0026rsquo;t tell the engine what type of data a variable holds, it figures it out while your code is running Variables can hold different types of values because it's all figured out during execution Static Typing bool isNew = 'hello'; // an error  Dynamic Typing var isNew = true; // no errors isNew = 'yup!'; isNew = 1;  Primitive Type: A Type of data that represents a single value That is, not an object Undefined `undefined` represents lack of existence (you shouldn't set a variable to this) Null `null` represents lack of existence (you can set a variable to this) Boolean `boolean` is true or false Number *Floating point* number (there's always some decimals). Unlike other programming languages, there's only one `number` type. and it can make math weird. String a sequence of characters (both '' and \"\" can be used) Symbol Unique type. Used in ES6 (the next version of JavaScript) Conceptual Aside: Operators Operator: A Special Function That is Syntactically (Written) Differently Generally, Operators take two parameters and return one result Conceptual Aside: Coercion Coercion Converting a value from one type to another This Happens quite often in JavaScript because it's dynamically typed. Default Value let\u0026rsquo;s code\nOperator Precedence And Associativity Operator Precedence: Which Operator function gets called first Functions are called in order of precedence (Higher precedence wins) Associativity: What Order Operator Functions Get Called In: Left-To-Right or Right-to-left When functions have the same precedence Comparison Operators let\u0026rsquo;s code\nObjects And Functions Object And The Dots Object Literals Faking NameSpace JSON \u0026amp; Object literals function are Objects function statements and function expression Object, function and this by value and by reference Conceptual Aside: Array Collections of anything Conceptual Aside: Building Objects Function Constructors, new, and the history of JavaScript let\u0026rsquo;s code after cerita dulu\nFunction Constructors: A normal Function that is used to construct objects. The `this` variable points a new empty object, and that object is returned from the Function automatically. Conceptual Aside: Event: Something that has happened in our app that we can respond to "
},
{
	"uri": "https://ikhsanalatsary.github.io/myslide/intro-to/jquery/",
	"title": "JQuery",
	"tags": [],
	"description": "",
	"content": " Apa itu JQuery? Kumpulan `functions` JavaScript (Library), yang memudahkan dan dapat digunakan berulang-ulang. Apa yang bisa dilakukan JQuery?  Akses element pada dokumen HTML Mengubah Document HTML pada Halaman web Menanggapi Tindakan Yang dilakukan oleh pengguna Animasi Bisa berkomunikasi dengan server  Kenapa Harus JQUERY? \"Write Less, Do More\"  Browser Compatibility  Chrome Safari Firefox Mozila IE  More\u0026hellip;  Dari pemula menjadi pro  Mudah digunakan dan dipahami walaupun pemula, bisa membuat website dinamis level profesional  Serba cepat  5 baris kode jQuery vs 30 baris kode vanilla JavaScript Tidak ada masalah dengan kompatibel browser yang berbeda Banyak Plugin bertebaran (Open Source)   Using JQUERY  Akses element (di jquery disebut Selectors)  dengan cara akses elemen html dengan cara akses elemen dengan ID(Unique) dengan cara akses elemen dengan nama kelas   CSS /* paragraph element*/ p { ... } /* ID */ #container { ... } /* class name */ .nama-kelas { ... }  jQuery /* paragraph element*/ $('p'); /* ID */ $('#container'); /* class name */ $('.nama-kelas');  Conceptual Aside  The DOM traversing the DOM Working with the DOM Listening to DOM events Styling Introduction to Ajax Basic Ajax with form Utility methods JQuery plugin Working with promises  Apa itu DOM Document Object Model: The DOM model represents a document with a logical tree. is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style and content. The DOM represents the document as nodes and objects. That way, programming languages can connect to the page. HTML Document \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;the title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;This is another paragraph.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;This is yet another paragraph.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  DOM tree modelling HTML, SVG, or XML documents as objects is not part of the JavaScript language Traversing The DOM Searching The DOM  Descendant:  mengakses turunan selektor(parent selektor) mengakses turunan langsung dari selektor (hirarki) mengakses lebih dari satu selector Pseudo classes CSS (filter)   Descendant HTLML \u0026lt;article\u0026gt; \u0026lt;h1\u0026gt;Cara menggunakan Jquery\u0026lt;/h1\u0026gt; \u0026lt;ul id=\u0026quot;parent\u0026quot;\u0026gt; \u0026lt;li\u0026gt;cari selektor\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;tambahkan kecap\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;ketiga\u0026quot;\u0026gt;sajikan\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt;  Jquery $('#parent li')  Descendant (direct children) HTLML \u0026lt;article\u0026gt; \u0026lt;h1\u0026gt;Cara menggunakan Jquery\u0026lt;/h1\u0026gt; \u0026lt;ul id=\u0026quot;parent\u0026quot;\u0026gt; \u0026lt;li\u0026gt;cari selektor\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;ul id=\u0026quot;other\u0026quot;\u0026gt; \u0026lt;li\u0026gt;tambahkan kecap\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;ketiga\u0026quot;\u0026gt;sajikan\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt;  Jquery $('#parent \u0026gt; li')  Descendant (select multiple selector) HTLML \u0026lt;article\u0026gt; \u0026lt;h1\u0026gt;Cara menggunakan Jquery\u0026lt;/h1\u0026gt; \u0026lt;ul id=\u0026quot;parent\u0026quot;\u0026gt; \u0026lt;!-- list ke #0 --\u0026gt; \u0026lt;li\u0026gt;cari selektor\u0026lt;/li\u0026gt; \u0026lt;!-- list ke #1 --\u0026gt; \u0026lt;li\u0026gt;tambahkan kecap\u0026lt;/li\u0026gt; \u0026lt;!-- list ke #2 --\u0026gt; \u0026lt;li class=\u0026quot;ketiga\u0026quot;\u0026gt;sajikan\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt;  Jquery $('.ketiga, #other')  Descendant (pseudo classes CSS) HTLML \u0026lt;article\u0026gt; \u0026lt;h1\u0026gt;Cara menggunakan Jquery\u0026lt;/h1\u0026gt; \u0026lt;ul id=\u0026quot;parent\u0026quot;\u0026gt; \u0026lt;li\u0026gt;cari selektor\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;ul id=\u0026quot;other\u0026quot;\u0026gt; \u0026lt;li\u0026gt;tambahkan kecap\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;ketiga\u0026quot;\u0026gt;sajikan\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt;  Jquery $('#parent li:first') // list pertama $('#parent li:last') // list terakhir $('#parent li:odd') // list ganjil $('#parent li:even') // list genap  Traversing It HTLML \u0026lt;article\u0026gt; \u0026lt;h1\u0026gt;Cara menggunakan Jquery\u0026lt;/h1\u0026gt; \u0026lt;ul id=\u0026quot;parent\u0026quot;\u0026gt; \u0026lt;li\u0026gt;cari selektor\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;tambahkan kecap\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;ketiga\u0026quot;\u0026gt;sajikan\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt;  Jquery $('#parent').find('li') // ini disebut traversal  pertama $('li:first')  kedua $('li').first();  Hasil tetap sama\nlebih cepat dibanding cara pertama!! Walking the DOM Bagaimana jika kita mencoba mendapatkan list yang ditengah (antara list pertama dan terakhir)?\nTraversing $('li').first().next();  ini di sebut method chaining\n$('li').first().next().prev(); // contoh more chaining  hasilnya kembali lagi ke sebelumnya\nWalking up the DOM Bagaimana jika kita mencoba mendapatkan parent selectornya?\n$('li').first().parent();  $('li').first().parent();  Walking down the DOM Traversing down $('#parent').children('li');  same as\n$('#parent \u0026gt; li');  Jquery Cheat Sheet Jquery Cheat Sheet\nAjax Asyncronous JavaScript And XML Tradisional communication Ajax communication "
},
{
	"uri": "https://ikhsanalatsary.github.io/myslide/intro-to/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "  Me  JavaScript  Jquery  "
},
{
	"uri": "https://ikhsanalatsary.github.io/myslide/",
	"title": "Mastering JavaScript: jQuery",
	"tags": [],
	"description": "Write less do more",
	"content": " Mastering JavaScript: jQuery "
},
{
	"uri": "https://ikhsanalatsary.github.io/myslide/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "Mastering JavaScript: jQuery\n"
},
{
	"uri": "https://ikhsanalatsary.github.io/myslide/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ikhsanalatsary.github.io/myslide/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]